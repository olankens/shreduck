/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/preset-controller/create';
import { Create$Params } from '../fn/preset-controller/create';
import { delete$ } from '../fn/preset-controller/delete';
import { Delete$Params } from '../fn/preset-controller/delete';
import { detail } from '../fn/preset-controller/detail';
import { Detail$Params } from '../fn/preset-controller/detail';
import { detailUnlockable } from '../fn/preset-controller/detail-unlockable';
import { DetailUnlockable$Params } from '../fn/preset-controller/detail-unlockable';
import { export$ } from '../fn/preset-controller/export';
import { Export$Params } from '../fn/preset-controller/export';
import { exportUnlockable } from '../fn/preset-controller/export-unlockable';
import { ExportUnlockable$Params } from '../fn/preset-controller/export-unlockable';
import { PresetDto } from '../models/preset-dto';
import { unlock } from '../fn/preset-controller/unlock';
import { Unlock$Params } from '../fn/preset-controller/unlock';
import { UnlockablePresetDto } from '../models/unlockable-preset-dto';
import { update } from '../fn/preset-controller/update';
import { Update$Params } from '../fn/preset-controller/update';

@Injectable({ providedIn: 'root' })
export class PresetControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `detail()` */
  static readonly DetailPath = '/preset/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `detail()` instead.
   *
   * This method doesn't expect any request body.
   */
  detail$Response(params: Detail$Params, context?: HttpContext): Observable<StrictHttpResponse<PresetDto>> {
    return detail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `detail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  detail(params: Detail$Params, context?: HttpContext): Observable<PresetDto> {
    return this.detail$Response(params, context).pipe(
      map((r: StrictHttpResponse<PresetDto>): PresetDto => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/preset/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<PresetDto>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<PresetDto> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<PresetDto>): PresetDto => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/preset/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `export()` */
  static readonly ExportPath = '/preset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `export()` instead.
   *
   * This method doesn't expect any request body.
   */
  export$Response(params?: Export$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PresetDto>>> {
    return export$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `export$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  export(params?: Export$Params, context?: HttpContext): Observable<Array<PresetDto>> {
    return this.export$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PresetDto>>): Array<PresetDto> => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/preset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create$Response(params?: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<PresetDto>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create(params?: Create$Params, context?: HttpContext): Observable<PresetDto> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<PresetDto>): PresetDto => r.body)
    );
  }

  /** Path part for operation `unlock()` */
  static readonly UnlockPath = '/preset/{id}/unlock';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unlock()` instead.
   *
   * This method doesn't expect any request body.
   */
  unlock$Response(params: Unlock$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return unlock(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unlock$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unlock(params: Unlock$Params, context?: HttpContext): Observable<void> {
    return this.unlock$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `exportUnlockable()` */
  static readonly ExportUnlockablePath = '/preset/unlockable';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exportUnlockable()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportUnlockable$Response(params?: ExportUnlockable$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnlockablePresetDto>>> {
    return exportUnlockable(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exportUnlockable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportUnlockable(params?: ExportUnlockable$Params, context?: HttpContext): Observable<Array<UnlockablePresetDto>> {
    return this.exportUnlockable$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UnlockablePresetDto>>): Array<UnlockablePresetDto> => r.body)
    );
  }

  /** Path part for operation `detailUnlockable()` */
  static readonly DetailUnlockablePath = '/preset/unlockable/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `detailUnlockable()` instead.
   *
   * This method doesn't expect any request body.
   */
  detailUnlockable$Response(params: DetailUnlockable$Params, context?: HttpContext): Observable<StrictHttpResponse<PresetDto>> {
    return detailUnlockable(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `detailUnlockable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  detailUnlockable(params: DetailUnlockable$Params, context?: HttpContext): Observable<PresetDto> {
    return this.detailUnlockable$Response(params, context).pipe(
      map((r: StrictHttpResponse<PresetDto>): PresetDto => r.body)
    );
  }

}
