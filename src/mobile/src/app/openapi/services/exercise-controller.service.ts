/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create1 } from '../fn/exercise-controller/create-1';
import { Create1$Params } from '../fn/exercise-controller/create-1';
import { detail1 } from '../fn/exercise-controller/detail-1';
import { Detail1$Params } from '../fn/exercise-controller/detail-1';
import { ExerciseDto } from '../models/exercise-dto';
import { export1 } from '../fn/exercise-controller/export-1';
import { Export1$Params } from '../fn/exercise-controller/export-1';
import { update1 } from '../fn/exercise-controller/update-1';
import { Update1$Params } from '../fn/exercise-controller/update-1';

@Injectable({ providedIn: 'root' })
export class ExerciseControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `detail1()` */
  static readonly Detail1Path = '/exercise/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `detail1()` instead.
   *
   * This method doesn't expect any request body.
   */
  detail1$Response(params: Detail1$Params, context?: HttpContext): Observable<StrictHttpResponse<ExerciseDto>> {
    return detail1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `detail1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  detail1(params: Detail1$Params, context?: HttpContext): Observable<ExerciseDto> {
    return this.detail1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExerciseDto>): ExerciseDto => r.body)
    );
  }

  /** Path part for operation `update1()` */
  static readonly Update1Path = '/exercise/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update1()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  update1$Response(params: Update1$Params, context?: HttpContext): Observable<StrictHttpResponse<ExerciseDto>> {
    return update1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update1$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  update1(params: Update1$Params, context?: HttpContext): Observable<ExerciseDto> {
    return this.update1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExerciseDto>): ExerciseDto => r.body)
    );
  }

  /** Path part for operation `export1()` */
  static readonly Export1Path = '/exercise';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `export1()` instead.
   *
   * This method doesn't expect any request body.
   */
  export1$Response(params?: Export1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExerciseDto>>> {
    return export1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `export1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  export1(params?: Export1$Params, context?: HttpContext): Observable<Array<ExerciseDto>> {
    return this.export1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExerciseDto>>): Array<ExerciseDto> => r.body)
    );
  }

  /** Path part for operation `create1()` */
  static readonly Create1Path = '/exercise';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create1()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create1$Response(params?: Create1$Params, context?: HttpContext): Observable<StrictHttpResponse<ExerciseDto>> {
    return create1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create1$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  create1(params?: Create1$Params, context?: HttpContext): Observable<ExerciseDto> {
    return this.create1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExerciseDto>): ExerciseDto => r.body)
    );
  }

}
